pipeline {
  agent any

  environment {
    scannerHome = tool name: 'sonar_scanner_dotnet'
    registry = 'kunalnagarro/devops'
    properties = null
    docker_port = null
    usernmae = 'kunal'
  }
  options {
    timestamp()
    timeout(time: 1, unit: 'HOURS')
    skipDefaultCheckout()
    buildDiscarder(logRotator(
        numToKeepStr: '3'),
      daysToKeepStr: '10'))
}
stages {
  stage('Start') {
    steps {
      checkout scm
      -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      checkout([$class: 'GITSCM', branches: [
            [name: '*/master']
          ], userRemoteConfigs: [
            [credentialsId: 'GitHub', url: 'https://github.com/beingKunal/app_kunal.git']
          ],
          -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
          script {
            docker_port: 7100
            properties = readProperties file: 'user.properties'
          }
        }
      }
      stage('nuget restore') {
        steps {
          echo "Running Build ${JOB_NAME} # ${BUILD_NUMBER} for ${properties['user.employeeid']} with docker as ${docker_port}"
          echo "Nuget Restore step"
          bat dotnet restore
        }
      }
      stage('Start SonarQube Analysis') {
        steps {
          echo "Start sonarQube Analysis Step"
          withSonarQube('TestSonar') {
            bat "${scannerHome}\\SonarScanner.MSBUILD.exe begin /k:sonar-Kunal /n:sonar-Kunal /v:1.0"

          }
        }
      }
      stage('Code Build') {
        steps {
          echo "Clean Previous Build"
          bat "dotnet Clean"

          // Build the project and all its dependencies
          echo "Code Build"
          bat 'dotnet build -c Release -o "DevOps/app/build"'
        }
      }
      stage("Stop sonarQube Analysis") {
        steps {
          echo "Stop sonarQube analysis"
          withSonarQubeEnv('Test_Sonar') {
            bat "${scannerHome}\\SonarScanner.MSBuild.exe end"
          }
        }
      }
      stage('Docker Image') {
        steps {
          echo "Docker image step"
          bat 'dotnet publish -c Release'
          bat "docker build -t i_${username}_master --no-cache -f DockerFile ."
        }
      }
      stage('Move Image to docker hub') {
        steps {
          echo "Move Image to Docker Hub"
          bat "docker tag i_${username}_master ${registry}:${BUIld_NUMBER}"
          withDockerRegistry([credentialsId: 'DockerHub', url: ""]) {
            bat "docker push ${registry}:${BUILD_NUMBER}"
          }
        }
      }
      stage("Docker Deploymnet") {
        steps {
          echo "Docker Deployment"
          bat "docker run --name DevOpsAPI -d -p 7100:80 ${registry}:${BUILD_NUMBER}"
        }
      }
    }
  }
